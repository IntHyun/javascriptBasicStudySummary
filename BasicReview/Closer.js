const myFunc = function () {
    let a = 1; // 클로저 공간
    let b = 2;

    const myFunc2 = function () {
        // 클로저함수
        // 위의 a라는 클로저 공간에 접근할 수 있는 유일한 방법은 myFunc2함수를 실행하는 것 뿐입니다.
        // 클로저는 외부에서 절대 접근할 수 없는 공간을 만드는 테크닉입니다.
        // 클로저는 함수안에 함수가 있는 구조로 이루어져있는데
        // 안에 있는 함수변수가 필요한 값이 외부 함수에 있다면
        // 가비지 콜렉터가 이를 다 지우지 않고 클로저공간을 만들어준다.
        // 이때 위처럼 a는 클로저공간이 되는 것이고 클로저 공간에 접근할 수 있는 함수가
        // 클로저 함수가 되는 것입니다.
        // 또한 클로저는 함수안에 함수가 있을때에만 쓸 수 있습니다!
        let b = 5;
        let c = 6;

        a = a + b + c;
        console.log(a);
    };

    return myFunc2;
};

const innerFunc = myFunc();

innerFunc();

// myFunc 함수는 myFunc2를 반환합니다.
// 이때 myFunc 함수는 return 키워드를 만나서 함수가 종료됩니다. 그리고 안에 있는 프로퍼티들은 삭제 됩니다.
//
